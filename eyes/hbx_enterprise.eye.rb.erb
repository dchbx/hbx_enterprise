BUS_DIRECTORY = File.join(File.dirname(__FILE__), "..")
LOG_DIRECTORY = File.join(BUS_DIRECTORY, "log")
PID_DIRECTORY = File.join(BUS_DIRECTORY, "pids")

BLUEPILL_LOG = File.join(LOG_DIRECTORY, "eye_hbx_enterprise.log")

Eye.config do
  logger BLUEPILL_LOG

  mail :host => "<%= @email_host %>", :port => <% @email_port || 25 %>, :from_mail => "<%= @email_from_address || "no-reply@dchbx.info" %>", :user => "<% @email_username %>", :password => "<%= @email_password %>" 
  contact :tevans, :mail, 'trey.evans@dc.gov'
  contact :admin, :mail, '<%= @admin_email %>'
end

def define_worker(worker_name, directory, worker_command, watch_kids = false)
  process(worker_name) do
    start_command worker_command
    stop_on_delete true
    stop_signals [:TERM, 10.seconds, :KILL]
    start_timeout 5.seconds
    pid_file File.join(PID_DIRECTORY, "#{worker_name}.pid")
    daemonize true
    working_dir directory
    stdall File.join(LOG_DIRECTORY, "#{worker_name}.log")
    if watch_kids
      monitor_children do
        stop_command "/bin/kill -9 {PID}"
        check :memory, :every => 30, :below => 200.megabytes, :times => [3,5]
      end
    end
  end
end

Eye.application 'eye_hbx_enterprise' do
    notify :tevans, :info
    notify :admin, :info

  define_worker("curam_application_completed_listener", BUS_DIRECTORY, "bundle exec padrino r amqp/curam_application_completed_listener.rb -e production", true)
  define_worker("oim_navigation_update_listener", BUS_DIRECTORY, "bundle exec padrino r amqp/oim_navigation_update_listener.rb -e production", true)
  define_worker("oim_account_creation_listener", BUS_DIRECTORY, "bundle exec padrino r amqp/oim_account_creation_listener.rb -e production", true)
  define_worker("curam_account_lookup_listener", BUS_DIRECTORY, "bundle exec padrino r amqp/curam_account_lookup_listener.rb -e production", true)
  define_worker("interactive_verification_start_listener", BUS_DIRECTORY, "bundle exec padrino r amqp/interactive_verification_start_listener.rb -e production", true)
  define_worker("interactive_verification_question_response_listener", BUS_DIRECTORY, "bundle exec padrino r amqp/interactive_verification_question_response_listener.rb -e production", true)
  define_worker("interactive_verification_override_listener", BUS_DIRECTORY, "bundle exec padrino r amqp/interactive_verification_override_listener.rb -e production", true)
  define_worker("ssa_verification_listener", BUS_DIRECTORY, "bundle exec padrino r amqp/ssa_verification_listener.rb -e production", true)
  define_worker("vlp_verification_listener", BUS_DIRECTORY, "bundle exec padrino r amqp/vlp_verification_listener.rb -e production", true)
  define_worker("residency_verification_listener", BUS_DIRECTORY, "bundle exec padrino r amqp/residency_verification_listener.rb -e production", true)
  define_worker("group_file_request_batcher", BUS_DIRECTORY, "bundle exec padrino r amqp/group_file_request_batcher.rb -e production", false)
  define_worker("employer_xml_drop_listener", BUS_DIRECTORY, "bundle exec padrino r amqp/employer_xml_drop_listener.rb -e production", true)
  define_worker("payment_processor_enrollment_drop_listener", BUS_DIRECTORY, "bundle exec padrino r amqp/payment_processor_enrollment_drop_listener.rb -e production", true)
#  define_worker("dcas_enrollment_provider", BUS_DIRECTORY, "bundle exec padrino r amqp/dcas_enrollment_provider.rb -e production", true)
#  define_worker("dcas_enrollment_provider_scaler", BUS_DIRECTORY, "bundle exec padrino r amqp/dcas_enrollment_provider_scaler.rb -e production")

  process("unicorn") do
    working_dir BUS_DIRECTORY
    pid_file "pids/unicorn.pid"
    start_command "bundle exec unicorn -c #{BUS_DIRECTORY}/config/unicorn.rb -E production -D"
    stdall "log/unicorn.log"

    # stop signals:
    #     # http://unicorn.bogomips.org/SIGNALS.html
    stop_signals [:TERM, 10.seconds]
    #
    #             # soft restart
    #    restart_command "kill -USR2 {PID}"
    #
    # check :cpu, :every => 30, :below => 80, :times => 3
    # check :memory, :every => 30, :below => 150.megabytes, :times => [3,5]
    #
    start_timeout 100.seconds
    restart_grace 30.seconds
    #
    monitor_children do
      stop_command "kill -QUIT {PID}"
      check :cpu, :every => 30, :below => 80, :times => 3
      check :memory, :every => 30, :below => 150.megabytes, :times => [3,5]
    end
  end
end
